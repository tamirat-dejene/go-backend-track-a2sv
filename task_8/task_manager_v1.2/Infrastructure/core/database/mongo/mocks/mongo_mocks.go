// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_mocks

import (
	"context"
	"t8/taskmanager/Infrastructure/core/database/mongo"

	mock "github.com/stretchr/testify/mock"
	mongo0 "go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Client provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Client() mongo.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 mongo.Client
	if returnFunc, ok := ret.Get(0).(func() mongo.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Client)
		}
	}
	return r0
}

// MockDatabase_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockDatabase_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Client() *MockDatabase_Client_Call {
	return &MockDatabase_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockDatabase_Client_Call) Run(run func()) *MockDatabase_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Client_Call) Return(client mongo.Client) *MockDatabase_Client_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockDatabase_Client_Call) RunAndReturn(run func() mongo.Client) *MockDatabase_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Collection(s string) mongo.Collection {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 mongo.Collection
	if returnFunc, ok := ret.Get(0).(func(string) mongo.Collection); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Collection)
		}
	}
	return r0
}

// MockDatabase_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockDatabase_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - s string
func (_e *MockDatabase_Expecter) Collection(s interface{}) *MockDatabase_Collection_Call {
	return &MockDatabase_Collection_Call{Call: _e.mock.On("Collection", s)}
}

func (_c *MockDatabase_Collection_Call) Run(run func(s string)) *MockDatabase_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_Collection_Call) Return(collection mongo.Collection) *MockDatabase_Collection_Call {
	_c.Call.Return(collection)
	return _c
}

func (_c *MockDatabase_Collection_Call) RunAndReturn(run func(s string) mongo.Collection) *MockDatabase_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollection creates a new instance of MockCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollection {
	mock := &MockCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCollection is an autogenerated mock type for the Collection type
type MockCollection struct {
	mock.Mock
}

type MockCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollection) EXPECT() *MockCollection_Expecter {
	return &MockCollection_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function for the type MockCollection
func (_mock *MockCollection) Aggregate(ctx context.Context, pipeline any) (mongo.Cursor, error) {
	ret := _mock.Called(ctx, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (mongo.Cursor, error)); ok {
		return returnFunc(ctx, pipeline)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) mongo.Cursor); ok {
		r0 = returnFunc(ctx, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, pipeline)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockCollection_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline any
func (_e *MockCollection_Expecter) Aggregate(ctx interface{}, pipeline interface{}) *MockCollection_Aggregate_Call {
	return &MockCollection_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, pipeline)}
}

func (_c *MockCollection_Aggregate_Call) Run(run func(ctx context.Context, pipeline any)) *MockCollection_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_Aggregate_Call) Return(cursor mongo.Cursor, err error) *MockCollection_Aggregate_Call {
	_c.Call.Return(cursor, err)
	return _c
}

func (_c *MockCollection_Aggregate_Call) RunAndReturn(run func(ctx context.Context, pipeline any) (mongo.Cursor, error)) *MockCollection_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CountDocuments provides a mock function for the type MockCollection
func (_mock *MockCollection) CountDocuments(ctx context.Context, filter any, opts ...*options.CountOptions) (int64, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.CountOptions) (int64, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.CountOptions) int64); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, ...*options.CountOptions) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type MockCollection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - opts ...*options.CountOptions
func (_e *MockCollection_Expecter) CountDocuments(ctx interface{}, filter interface{}, opts ...interface{}) *MockCollection_CountDocuments_Call {
	return &MockCollection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockCollection_CountDocuments_Call) Run(run func(ctx context.Context, filter any, opts ...*options.CountOptions)) *MockCollection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []*options.CountOptions
		var variadicArgs []*options.CountOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]*options.CountOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCollection_CountDocuments_Call) Return(n int64, err error) *MockCollection_CountDocuments_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockCollection_CountDocuments_Call) RunAndReturn(run func(ctx context.Context, filter any, opts ...*options.CountOptions) (int64, error)) *MockCollection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function for the type MockCollection
func (_mock *MockCollection) DeleteOne(ctx context.Context, filter any) (int64, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (int64, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) int64); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockCollection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
func (_e *MockCollection_Expecter) DeleteOne(ctx interface{}, filter interface{}) *MockCollection_DeleteOne_Call {
	return &MockCollection_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, filter)}
}

func (_c *MockCollection_DeleteOne_Call) Run(run func(ctx context.Context, filter any)) *MockCollection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_DeleteOne_Call) Return(n int64, err error) *MockCollection_DeleteOne_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockCollection_DeleteOne_Call) RunAndReturn(run func(ctx context.Context, filter any) (int64, error)) *MockCollection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockCollection
func (_mock *MockCollection) Find(ctx context.Context, filter any, opts ...*options.FindOptions) (mongo.Cursor, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.FindOptions) (mongo.Cursor, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.FindOptions) mongo.Cursor); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, ...*options.FindOptions) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCollection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - opts ...*options.FindOptions
func (_e *MockCollection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *MockCollection_Find_Call {
	return &MockCollection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockCollection_Find_Call) Run(run func(ctx context.Context, filter any, opts ...*options.FindOptions)) *MockCollection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []*options.FindOptions
		var variadicArgs []*options.FindOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]*options.FindOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCollection_Find_Call) Return(cursor mongo.Cursor, err error) *MockCollection_Find_Call {
	_c.Call.Return(cursor, err)
	return _c
}

func (_c *MockCollection_Find_Call) RunAndReturn(run func(ctx context.Context, filter any, opts ...*options.FindOptions) (mongo.Cursor, error)) *MockCollection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockCollection
func (_mock *MockCollection) FindOne(ctx context.Context, filter any) mongo.SingleResult {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) mongo.SingleResult); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResult)
		}
	}
	return r0
}

// MockCollection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockCollection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
func (_e *MockCollection_Expecter) FindOne(ctx interface{}, filter interface{}) *MockCollection_FindOne_Call {
	return &MockCollection_FindOne_Call{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *MockCollection_FindOne_Call) Run(run func(ctx context.Context, filter any)) *MockCollection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_FindOne_Call) Return(singleResult mongo.SingleResult) *MockCollection_FindOne_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *MockCollection_FindOne_Call) RunAndReturn(run func(ctx context.Context, filter any) mongo.SingleResult) *MockCollection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockCollection
func (_mock *MockCollection) InsertMany(ctx context.Context, documents []any) ([]any, error) {
	ret := _mock.Called(ctx, documents)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 []any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []any) ([]any, error)); ok {
		return returnFunc(ctx, documents)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []any) []any); ok {
		r0 = returnFunc(ctx, documents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []any) error); ok {
		r1 = returnFunc(ctx, documents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockCollection_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - documents []any
func (_e *MockCollection_Expecter) InsertMany(ctx interface{}, documents interface{}) *MockCollection_InsertMany_Call {
	return &MockCollection_InsertMany_Call{Call: _e.mock.On("InsertMany", ctx, documents)}
}

func (_c *MockCollection_InsertMany_Call) Run(run func(ctx context.Context, documents []any)) *MockCollection_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []any
		if args[1] != nil {
			arg1 = args[1].([]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_InsertMany_Call) Return(vs []any, err error) *MockCollection_InsertMany_Call {
	_c.Call.Return(vs, err)
	return _c
}

func (_c *MockCollection_InsertMany_Call) RunAndReturn(run func(ctx context.Context, documents []any) ([]any, error)) *MockCollection_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockCollection
func (_mock *MockCollection) InsertOne(ctx context.Context, document any) (any, error) {
	ret := _mock.Called(ctx, document)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (any, error)); ok {
		return returnFunc(ctx, document)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) any); ok {
		r0 = returnFunc(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, document)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockCollection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document any
func (_e *MockCollection_Expecter) InsertOne(ctx interface{}, document interface{}) *MockCollection_InsertOne_Call {
	return &MockCollection_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, document)}
}

func (_c *MockCollection_InsertOne_Call) Run(run func(ctx context.Context, document any)) *MockCollection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_InsertOne_Call) Return(v any, err error) *MockCollection_InsertOne_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockCollection_InsertOne_Call) RunAndReturn(run func(ctx context.Context, document any) (any, error)) *MockCollection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function for the type MockCollection
func (_mock *MockCollection) UpdateMany(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, update, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter, update)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 *mongo0.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) (*mongo0.UpdateResult, error)); ok {
		return returnFunc(ctx, filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) *mongo0.UpdateResult); ok {
		r0 = returnFunc(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo0.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, any, ...*options.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type MockCollection_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - update any
//   - opts ...*options.UpdateOptions
func (_e *MockCollection_Expecter) UpdateMany(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockCollection_UpdateMany_Call {
	return &MockCollection_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockCollection_UpdateMany_Call) Run(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions)) *MockCollection_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 []*options.UpdateOptions
		var variadicArgs []*options.UpdateOptions
		if len(args) > 3 {
			variadicArgs = args[3].([]*options.UpdateOptions)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCollection_UpdateMany_Call) Return(updateResult *mongo0.UpdateResult, err error) *MockCollection_UpdateMany_Call {
	_c.Call.Return(updateResult, err)
	return _c
}

func (_c *MockCollection_UpdateMany_Call) RunAndReturn(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error)) *MockCollection_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockCollection
func (_mock *MockCollection) UpdateOne(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, update, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter, update)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo0.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) (*mongo0.UpdateResult, error)); ok {
		return returnFunc(ctx, filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) *mongo0.UpdateResult); ok {
		r0 = returnFunc(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo0.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, any, ...*options.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - update any
//   - opts ...*options.UpdateOptions
func (_e *MockCollection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockCollection_UpdateOne_Call {
	return &MockCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockCollection_UpdateOne_Call) Run(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions)) *MockCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 []*options.UpdateOptions
		var variadicArgs []*options.UpdateOptions
		if len(args) > 3 {
			variadicArgs = args[3].([]*options.UpdateOptions)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCollection_UpdateOne_Call) Return(updateResult *mongo0.UpdateResult, err error) *MockCollection_UpdateOne_Call {
	_c.Call.Return(updateResult, err)
	return _c
}

func (_c *MockCollection_UpdateOne_Call) RunAndReturn(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error)) *MockCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockClient
func (_mock *MockClient) Connect(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Connect(ctx interface{}) *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockClient_Connect_Call) Run(run func(ctx context.Context)) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(err error) *MockClient_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function for the type MockClient
func (_mock *MockClient) Database(name string) mongo.Database {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 mongo.Database
	if returnFunc, ok := ret.Get(0).(func(string) mongo.Database); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Database)
		}
	}
	return r0
}

// MockClient_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockClient_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
//   - name string
func (_e *MockClient_Expecter) Database(name interface{}) *MockClient_Database_Call {
	return &MockClient_Database_Call{Call: _e.mock.On("Database", name)}
}

func (_c *MockClient_Database_Call) Run(run func(name string)) *MockClient_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Database_Call) Return(database mongo.Database) *MockClient_Database_Call {
	_c.Call.Return(database)
	return _c
}

func (_c *MockClient_Database_Call) RunAndReturn(run func(name string) mongo.Database) *MockClient_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockClient
func (_mock *MockClient) Disconnect(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Disconnect(ctx interface{}) *MockClient_Disconnect_Call {
	return &MockClient_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *MockClient_Disconnect_Call) Run(run func(ctx context.Context)) *MockClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Disconnect_Call) Return(err error) *MockClient_Disconnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Disconnect_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockClient
func (_mock *MockClient) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Ping(ctx interface{}) *MockClient_Ping_Call {
	return &MockClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockClient_Ping_Call) Run(run func(ctx context.Context)) *MockClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Ping_Call) Return(err error) *MockClient_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// StartSession provides a mock function for the type MockClient
func (_mock *MockClient) StartSession() (mongo0.Session, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 mongo0.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (mongo0.Session, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() mongo0.Session); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo0.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_StartSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSession'
type MockClient_StartSession_Call struct {
	*mock.Call
}

// StartSession is a helper method to define mock.On call
func (_e *MockClient_Expecter) StartSession() *MockClient_StartSession_Call {
	return &MockClient_StartSession_Call{Call: _e.mock.On("StartSession")}
}

func (_c *MockClient_StartSession_Call) Run(run func()) *MockClient_StartSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_StartSession_Call) Return(session mongo0.Session, err error) *MockClient_StartSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockClient_StartSession_Call) RunAndReturn(run func() (mongo0.Session, error)) *MockClient_StartSession_Call {
	_c.Call.Return(run)
	return _c
}

// UseSession provides a mock function for the type MockClient
func (_mock *MockClient) UseSession(ctx context.Context, fn func(mongo0.SessionContext) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for UseSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(mongo0.SessionContext) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_UseSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseSession'
type MockClient_UseSession_Call struct {
	*mock.Call
}

// UseSession is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(mongo0.SessionContext) error
func (_e *MockClient_Expecter) UseSession(ctx interface{}, fn interface{}) *MockClient_UseSession_Call {
	return &MockClient_UseSession_Call{Call: _e.mock.On("UseSession", ctx, fn)}
}

func (_c *MockClient_UseSession_Call) Run(run func(ctx context.Context, fn func(mongo0.SessionContext) error)) *MockClient_UseSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(mongo0.SessionContext) error
		if args[1] != nil {
			arg1 = args[1].(func(mongo0.SessionContext) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_UseSession_Call) Return(err error) *MockClient_UseSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_UseSession_Call) RunAndReturn(run func(ctx context.Context, fn func(mongo0.SessionContext) error) error) *MockClient_UseSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSingleResult creates a new instance of MockSingleResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSingleResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSingleResult {
	mock := &MockSingleResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSingleResult is an autogenerated mock type for the SingleResult type
type MockSingleResult struct {
	mock.Mock
}

type MockSingleResult_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSingleResult) EXPECT() *MockSingleResult_Expecter {
	return &MockSingleResult_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function for the type MockSingleResult
func (_mock *MockSingleResult) Decode(v any) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSingleResult_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockSingleResult_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - v any
func (_e *MockSingleResult_Expecter) Decode(v interface{}) *MockSingleResult_Decode_Call {
	return &MockSingleResult_Decode_Call{Call: _e.mock.On("Decode", v)}
}

func (_c *MockSingleResult_Decode_Call) Run(run func(v any)) *MockSingleResult_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSingleResult_Decode_Call) Return(err error) *MockSingleResult_Decode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSingleResult_Decode_Call) RunAndReturn(run func(v any) error) *MockSingleResult_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCursor creates a new instance of MockCursor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCursor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCursor {
	mock := &MockCursor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCursor is an autogenerated mock type for the Cursor type
type MockCursor struct {
	mock.Mock
}

type MockCursor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCursor) EXPECT() *MockCursor_Expecter {
	return &MockCursor_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type MockCursor
func (_mock *MockCursor) All(ctx context.Context, results any) error {
	ret := _mock.Called(ctx, results)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) error); ok {
		r0 = returnFunc(ctx, results)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockCursor_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
//   - results any
func (_e *MockCursor_Expecter) All(ctx interface{}, results interface{}) *MockCursor_All_Call {
	return &MockCursor_All_Call{Call: _e.mock.On("All", ctx, results)}
}

func (_c *MockCursor_All_Call) Run(run func(ctx context.Context, results any)) *MockCursor_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCursor_All_Call) Return(err error) *MockCursor_All_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_All_Call) RunAndReturn(run func(ctx context.Context, results any) error) *MockCursor_All_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockCursor
func (_mock *MockCursor) Close(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCursor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCursor_Expecter) Close(ctx interface{}) *MockCursor_Close_Call {
	return &MockCursor_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockCursor_Close_Call) Run(run func(ctx context.Context)) *MockCursor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCursor_Close_Call) Return(err error) *MockCursor_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_Close_Call) RunAndReturn(run func(ctx context.Context) error) *MockCursor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function for the type MockCursor
func (_mock *MockCursor) Decode(v any) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCursor_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - v any
func (_e *MockCursor_Expecter) Decode(v interface{}) *MockCursor_Decode_Call {
	return &MockCursor_Decode_Call{Call: _e.mock.On("Decode", v)}
}

func (_c *MockCursor_Decode_Call) Run(run func(v any)) *MockCursor_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCursor_Decode_Call) Return(err error) *MockCursor_Decode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_Decode_Call) RunAndReturn(run func(v any) error) *MockCursor_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockCursor
func (_mock *MockCursor) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockCursor_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockCursor_Expecter) Err() *MockCursor_Err_Call {
	return &MockCursor_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockCursor_Err_Call) Run(run func()) *MockCursor_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCursor_Err_Call) Return(err error) *MockCursor_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_Err_Call) RunAndReturn(run func() error) *MockCursor_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function for the type MockCursor
func (_mock *MockCursor) Next(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCursor_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockCursor_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCursor_Expecter) Next(ctx interface{}) *MockCursor_Next_Call {
	return &MockCursor_Next_Call{Call: _e.mock.On("Next", ctx)}
}

func (_c *MockCursor_Next_Call) Run(run func(ctx context.Context)) *MockCursor_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCursor_Next_Call) Return(b bool) *MockCursor_Next_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCursor_Next_Call) RunAndReturn(run func(ctx context.Context) bool) *MockCursor_Next_Call {
	_c.Call.Return(run)
	return _c
}
